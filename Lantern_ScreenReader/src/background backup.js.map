{
  "version": 3,
  "file": "background backup.js",
  "sourceRoot": "",
  "sources": [
    "background backup.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;AAAA,MAAA;;EAIA,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAA3B,CAAuC,QAAA,CAAA,CAAA,EAAA;;WAErC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAApB,CAAwB;MAAC,CAAA,EAAG;IAAJ,CAAxB,EAAwC,QAAA,CAAA,CAAA;aACtC,OAAO,CAAC,GAAR,CAAY,OAAZ;IADsC,CAAxC;EAFqC,CAAvC,EAJA;;;EAUA,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC,WAAxC,CAAoD,MAApD,EAA+D,QAAA,CAAA,CAAA;WAC7D,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAxC,CAAiD;MAC/C;QAAA,UAAA,EAAY;UAAC,IAAI,MAAM,CAAC,kBAAkB,CAAC,gBAA9B,CACX;YAAA,OAAA,EAAS;cAAC,UAAA,EAAY;YAAb;UAAT,CADW,CAAD;SAAZ;QAGA,OAAA,EAAS,CAAC,IAAI,MAAM,CAAC,kBAAkB,CAAC,cAA/B;MAHT,CAD+C;KAAjD;EAD6D,CAA/D;;EAQA,IAAO,oDAAP;IACE,QAAA,GAAW,KADb;GAlBA;;;;;;;;;;;;;;;;;;;;EAsCA,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,WAA1B,CAAsC,QAAA,CAAC,OAAD,CAAA;IACpC,KAAA,CAAM,OAAN,EAAA;;IAGA,KAAA,CAAM,GAAN;IAEA,MAAM,CAAC,IAAI,CAAC,aAAZ,CAA0B;MAAC,IAAA,EAAM;IAAP,CAA1B;WACA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAArB,CAAyB,CAAC,MAAD,CAAzB,EAAmC,QAAA,CAAC,MAAD,CAAA;aACjC,QAAA,GAAW,MAAM,CAAC;IADe,CAAnC;EAPoC,CAAtC;;EAtCA;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "###\r\n  Listens for events in the browser, if it's triggered it runs and then unloads itself\r\n###\r\n\r\nchrome.runtime.onInstalled.addListener ->\r\n#storage lets multiple extension components access this parameter\r\n  chrome.storage.sync.set {s: '#3aa757'}, ->\r\n    console.log \"green\"\r\n\r\n#loaded when needed and then removed\r\nchrome.declarativeContent.onPageChanged.removeRules undefined, ->\r\n  chrome.declarativeContent.onPageChanged.addRules [\r\n    conditions: [new chrome.declarativeContent.PageStateMatcher\r\n      pageUrl: {hostEquals: 'developer.chrome.com'}\r\n    ],\r\n    actions: [new chrome.declarativeContent.ShowPageAction]\r\n  ]\r\n\r\nif not elements?\r\n  elements = null\r\n#chrome.storage.local.get ['test'], (result) ->\r\n#  elements = result.test\r\n\r\n#TODO use onPageChange\r\n#If no tree, or new page, or page change\r\n#parse tree (content script)\r\n#read elements name (function)\r\n\r\n#On refresh rate\r\n#parse page for notifications\r\n#add list to notifications, change index to 0\r\n#if change read elements name using index\r\n\r\n#Notifications OPTIONAL\r\n#Keep list of elements, {elements: [], index = 0, notifications: []}\r\n#when issuing command, if index >= len(notifications) element[index] else notifications[index]\r\n\r\n#Commands must be issued with Ctrl\r\nchrome.commands.onCommand.addListener (command) ->\r\n  alert command\r\n  #TODO MESSAGE TEST\r\n\r\n  alert 's'\r\n\r\n  chrome.tabs.executeScript {file: './ab.js'}\r\n  chrome.storage.local.get ['test'], (result) ->\r\n    elements = result.test\r\n#TODO MESSAGE TEST\r\n#if no tree skip\r\n#todo if tree is present change icon\r\n#change UI with list of elements and index\r\n#if 1, 2, 3, 4 (is for more)\r\n#if number is functional\r\n#if element has action\r\n#Element.onAction (if it's a paragraph, onAction may include speaking, if it's a button clicking and if form, setting the cursor and notifying the user)\r\n#if new list is returned\r\n#add elements to UI, refresh index\r\n#if 5\r\n#if functional\r\n#index + 4\r\n#add elements to UI\r\n#if esc\r\n#if element in elements has parent has parent\r\n#list is element.parent.parent.children()\r\n#add elements to UI, refresh index, destroy notifications\r\n#repeat does nothing but still reads the elements\r\n#read list using index (function)"
  ]
}