{
  "version": 3,
  "file": "performance-now.js",
  "sourceRoot": "",
  "sources": [
    "performance-now.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,QAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA;;EAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;EACP,IAAI,CAAC,GAAL,CAAS,OAAA,CAAQ,iBAAR,CAAT;;EACA,CAAA,CAAC,MAAD,EAAQ,MAAR,CAAA,GAAkB,IAAlB;;EACA,QAAA,GAAW,OAAA,CAAQ,UAAR;;EAEX,GAAA,GAAM,OAAA,CAAQ,KAAR;;EAEN,SAAA,GAAY,QAAA,CAAA,CAAA;WAAG,OAAO,CAAC,MAAR,CAAA,CAAA,GAAmB;EAAtB;;EAEZ,QAAA,CAAS,KAAT,EAAgB,QAAA,CAAA,CAAA;IACd,EAAA,CAAG,kEAAH,EAAuE,QAAA,CAAA,CAAA;aACrE,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,GAAL,CAAS,GAAA,CAAA,CAAA,GAAM,SAAA,CAAA,CAAf,CAAhB,EAA6C,CAA7C;IADqE,CAAvE;IAGA,EAAA,CAAG,kDAAH,EAAuD,QAAA,CAAA,CAAA;aACrD,MAAM,CAAC,OAAP,CAAe,GAAA,CAAA,CAAf,EAAsB,GAAA,CAAA,CAAtB;IADqD,CAAvD;IAGA,EAAA,CAAG,wCAAH,EAA6C,QAAA,CAAA,CAAA;aAC3C,MAAM,CAAC,OAAP,CAAe,IAAI,CAAC,GAAL,CAAS,GAAA,CAAA,CAAA,GAAQ,GAAA,CAAA,CAAjB,CAAf,EAAwC,KAAxC;IAD2C,CAA7C;IAGA,EAAA,CAAG,0FAAH,EAA+F,QAAA,CAAA,CAAA;AAC7F,UAAA;MAAA,IAAC,CAAA,OAAD,CAAS,IAAT;MACM,KAAI,2BAAJ;QAAN,GAAA,CAAA;MAAM;aACN;IAH6F,CAA/F;IAKA,EAAA,CAAG,8DAAH,EAAmE,QAAA,CAAA,CAAA;AACjE,UAAA;MAAA,MAAA;;AAAgB;QAAA,KAAI,yBAAJ;uBAAN,GAAA,CAAA;QAAM,CAAA;;;aAChB,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;IAF4C,CAAnE;IAIA,EAAA,CAAG,+DAAH,EAAoE,QAAA,CAAA,CAAA;AAClE,UAAA;MAAA,OAAA,GAAU,GAAA,CAAA;aACV,QAAQ,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,CAAzB,CAA2B,CAAC,IAA5B,CAAiC,QAAA,CAAA,CAAA;eAAG,MAAM,CAAC,OAAP,CAAgB,GAAA,CAAA,CAAA,GAAM,OAAtB,EAAgC,GAAhC;MAAH,CAAjC;IAFkE,CAApE;IAIA,EAAA,CAAG,4DAAH,EAAiE,QAAA,CAAA,CAAA;AAC/D,UAAA;MAAA,OAAA,GAAU,GAAA,CAAA;aACV,QAAQ,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,CAAzB,CAA2B,CAAC,IAA5B,CAAiC,QAAA,CAAA,CAAA;eAAG,MAAM,CAAC,OAAP,CAAgB,GAAA,CAAA,CAAA,GAAM,OAAtB,EAAgC,CAAhC;MAAH,CAAjC;IAF+D,CAAjE;IAIA,EAAA,CAAG,kEAAH,EAAuE,QAAA,CAAA,CAAA;AACrE,UAAA;MAAA,OAAA,GAAU,GAAA,CAAA;aACV,QAAQ,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,GAAzB,CAA6B,CAAC,IAA9B,CAAmC,QAAA,CAAA,CAAA;eAAG,MAAM,CAAC,OAAP,CAAgB,GAAA,CAAA,CAAA,GAAM,OAAtB,EAAgC,GAAhC;MAAH,CAAnC;IAFqE,CAAvE;WAIA,EAAA,CAAG,+DAAH,EAAoE,QAAA,CAAA,CAAA;AAClE,UAAA;MAAA,OAAA,GAAU,GAAA,CAAA;aACV,QAAQ,CAAC,OAAT,CAAA,CAAkB,CAAC,KAAnB,CAAyB,GAAzB,CAA6B,CAAC,IAA9B,CAAmC,QAAA,CAAA,CAAA;eAAG,MAAM,CAAC,OAAP,CAAgB,GAAA,CAAA,CAAA,GAAM,OAAtB,EAAgC,GAAhC;MAAH,CAAnC;IAFkE,CAApE;EA/Bc,CAAhB;AATA",
  "sourcesContent": [
    "chai = require \"chai\"\nchai.use(require \"chai-increasing\")\n{assert,expect} = chai\nBluebird = require \"bluebird\"\n\nnow = require \"../\"\n\ngetUptime = -> process.uptime() * 1e3\n\ndescribe \"now\", ->\n  it \"reported time differs at most 1ms from a freshly reported uptime\", ->\n    assert.isAtMost Math.abs(now()-getUptime()), 1\n\n  it \"two subsequent calls return an increasing number\", ->\n    assert.isBelow now(), now()\n\n  it \"has less than 10 microseconds overhead\", ->\n    assert.isBelow Math.abs(now() - now()), 0.010\n\n  it \"can be called 1 million times in under 1 second (averaging under 1 microsecond per call)\", ->\n    @timeout 1000\n    now() for [0...1e6]\n    undefined\n\n  it \"for 10,000 numbers, number n is never bigger than number n-1\", ->\n    stamps = (now() for [1...10000])\n    expect(stamps).to.be.increasing\n\n  it \"shows that at least 0.2 ms has passed after a timeout of 1 ms\", ->\n    earlier = now()\n    Bluebird.resolve().delay(1).then -> assert.isAbove (now()-earlier), 0.2\n\n  it \"shows that at most 3 ms has passed after a timeout of 1 ms\", ->\n    earlier = now()\n    Bluebird.resolve().delay(1).then -> assert.isBelow (now()-earlier), 3\n\n  it \"shows that at least 190ms ms has passed after a timeout of 200ms\", ->\n    earlier = now()\n    Bluebird.resolve().delay(200).then -> assert.isAbove (now()-earlier), 190\n\n  it \"shows that at most 220 ms has passed after a timeout of 200ms\", ->\n    earlier = now()\n    Bluebird.resolve().delay(200).then -> assert.isBelow (now()-earlier), 220\n"
  ]
}