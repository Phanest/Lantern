// Generated by CoffeeScript 2.3.2
(function() {
  //classes
  //todo add parents to children
  //todo children, onAction
  var Button, Comments, Form, Media, Section, aText, addElement, notification, tree;

  Section = class Section {
    constructor(element, content = 'C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/contains') {
      this.id = element['@id'];
      this.name = element['C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/name'][0]['@value'];
      this.addChildrenIds(element, content);
    }

    addChildrenIds(element, content) {
      var id, ids, j, len1, results;
      this.children = [];
      ids = element[content];
      if (ids == null) {
        return;
      }
      if (typeof ids === 'object') { //if multiple children
//todo [udnefined, undefined] at end
        results = [];
        for (j = 0, len1 = ids.length; j < len1; j++) {
          id = ids[j];
          results.push(this.children.push(id['@id']));
        }
        return results;
      } else {
        return this.children.push(ids['@id']);
      }
    }

    addChildren(elements) {
      var i, id, j, len, ref, results;
      len = this.children.length;
      results = [];
      for (i = j = 0, ref = len; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        id = this.children[i];
        this.children[i] = elements[id][0];
        elements[id][0].parents = this;
        results.push(elements[id][1] += 1);
      }
      return results;
    }

    onAction() {
      return this.children;
    }

  };

  aText = class aText extends Section {
    constructor(element) {
      var ref;
      super(element, 'C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/alternatives');
      this.content = (ref = element['C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/content']) != null ? ref[0]['@value'] : void 0;
    }

    onAction() {
      if (this.children.length === 0) {
        return this.children;
      } else if (this.content != null) {
        //alert @content #todo read aloud
        return console.log(this.content);
      }
    }

  };

  Media = class Media extends Section {
    constructor(element) {
      var ref;
      super(element);
      this.source = (ref = element['C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/source']) != null ? ref[0]['@value'] : void 0;
    }

    onAction() {
      if (this.source != null) {
        return console.log(this.source); //todo play source
      }
    }

  };

  Form = class Form extends Section {
    constructor(element) {
      var ref;
      super(element);
      this.source = (ref = element['C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/source']) != null ? ref[0]['@value'] : void 0;
    }

    onAction() {
      if (this.source != null) {
        return console.log(this.source); //todo place cursor on button
      }
    }

  };

  Button = class Button extends Section {
    constructor(element) {
      var ref;
      super(element);
      this.source = (ref = element['C:/Users/Kanan-PC/Desktop/Lantern/Lantern_Examples/Lantern.owl/source']) != null ? ref[0]['@value'] : void 0;
    }

    onAction() {
      if (this.source != null) {
        return console.log(this.source); //todo go to link
      }
    }

  };

  Comments = class Comments {
    constructor(element) {}

  };

  notification = class notification {
    constructor(element) {}

  };

  tree = class tree {
    constructor(elements) {
      var element, key;
      this.children = [];
      for (key in elements) {
        element = elements[key];
        if (element[1] === 0) {
          element[0].parent = this;
          this.children.push(element[0]);
        }
      }
    }

  };

  //each class has id
  addElement = function(element) {
    var Type, filter, obj;
    Type = element["@type"][0];
    filter = /[A-Za-z]*$/;
    Type = filter.exec(Type)[0];
    obj = null;
    switch (Type) {
      case 'section':
        return new Section(element);
      case 'text':
        return new aText(element);
      case 'media':
        return new Media(element);
      case 'form':
        return new Form(element);
      case 'button':
        return new Button(element);
      case 'comment':
        return new Comments(element);
      case 'notification':
        return new notification(element);
      default:
        return null;
    }
  };

}).call(this);

//# sourceMappingURL=elements.js.map
